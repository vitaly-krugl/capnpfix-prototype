/* ---------------------------------------------------------------------
 * Numenta Platform for Intelligent Computing (NuPIC)
 * Copyright (C) 2013, Numenta, Inc.  Unless you have an agreement
 * with Numenta, Inc., for a separate license for this software code, the
 * following terms and conditions apply:
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero Public License for more details.
 *
 * You should have received a copy of the GNU Affero Public License
 * along with this program.  If not, see http://www.gnu.org/licenses.
 *
 * http://numenta.org/licenses/
 * ---------------------------------------------------------------------
 */

/** @file
    Random Number Generator interface
*/

#ifndef NTA_RANDOM_HPP
#define NTA_RANDOM_HPP

#include <algorithm>
#include <cstdlib>
#include <string>
#include <vector>
#include <utility>

#include <nupic/proto/RandomProto.capnp.h>
#include <nupic/types/Serializable.hpp>
#include <nupic/types/Types.hpp>
#include <nupic/utils/Log.hpp>

typedef NTA_UInt64 (*RandomSeedFuncPtr)();

namespace nupic {
  /**
   * @b Responsibility
   * Provides standardized random number generation for the NuPIC Runtime Engine.
   * Seed can be logged in one run and then set in another.
   * @b Rationale
   * Makes it possible to reproduce tests that are driven by random number generation.
   *
   * @b Description
   * Functionality is similar to the standard random() function that is provided by C.
   *
   * Each Random object is a random number generator. There are three ways of
   * creating one:
   * 1) explicit seed
   *       Random rng(seed);
   * 2) self-seeded
   *       Random rng;
   * 3) named generator -- normally self-seeded, but seed may be
   *    set explicitly through an environment variable
   *       Random rng("level2TP");
   *    If NTA_RANDOM_DEBUG is set, this object will log its self-seed
   *    The seed can be explicitly set through NTA_RANDOM_SEED_level2TP
   *
   * Good self-seeds are generated by an internal global random number generator.
   * This global rng is seeded from the current time, but its seed may be
   * overridden with NTA_RANDOM_SEED
   *
   * Automated tests that use random numbers should normally use named generators.
   * This allows them to get a different seed each time, but also allows reproducibility
   * in the case that a test failure is triggered by a particular seed.
   *
   * Random should not be used if cryptographic strength is required (e.g. for
   * generating a challenge in an authentication scheme).
   *
   * @todo Add ability to specify different rng algorithms.
   */
  class RandomImpl;

  class Random : public Serializable<RandomProto>
  {
  public:

    Random(unsigned long seed = 0);

    // support copy constructor and operator= -- these require non-default
    // implementations because of the impl_ pointer.
    // They do a deep copy of impl_ so that an RNG and its copy generate the
    // same set of numbers.
    Random(const Random&);
    Random& operator=(const Random&);
    ~Random();

    // write serialized data
    using Serializable::write;
    void write(RandomProto::Builder& proto) const override;

    // read and deserialize data
    using Serializable::read;
    void read(RandomProto::Reader& proto) override;

    // return a value uniformly distributed between 0 and max-1
    unsigned long getSeed(void) {return seed_;}

  protected:

    RandomImpl *impl_;
    unsigned long seed_;
  };

} // namespace nupic



#endif // NTA_RANDOM_HPP

